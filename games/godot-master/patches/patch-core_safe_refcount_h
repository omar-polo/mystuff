$OpenBSD: patch-core_safe_refcount_h,v 1.1 2019/09/02 18:20:12 thfr Exp $

hppa, ppc: use __atomic functions as 64-bit __sync operators
are not supported, from:
https://github.com/godotengine/godot/pull/31321 

Index: core/safe_refcount.h
--- core/safe_refcount.h.orig
+++ core/safe_refcount.h
@@ -54,30 +54,22 @@ static _ALWAYS_INLINE_ T atomic_conditional_increment(
 
 template <class T>
 static _ALWAYS_INLINE_ T atomic_decrement(volatile T *pw) {
-	(*pw)--;
-
-	return *pw;
+	return __atomic_sub_fetch(pw, 1, __ATOMIC_SEQ_CST);
 }
 
 template <class T>
 static _ALWAYS_INLINE_ T atomic_increment(volatile T *pw) {
-	(*pw)++;
-
-	return *pw;
+	return __atomic_add_fetch(pw, 1, __ATOMIC_SEQ_CST);
 }
 
 template <class T, class V>
 static _ALWAYS_INLINE_ T atomic_sub(volatile T *pw, volatile V val) {
-	(*pw) -= val;
-
-	return *pw;
+	return __atomic_sub_fetch(pw, val, __ATOMIC_SEQ_CST);
 }
 
 template <class T, class V>
 static _ALWAYS_INLINE_ T atomic_add(volatile T *pw, volatile V val) {
-	(*pw) += val;
-
-	return *pw;
+	return __atomic_add_fetch(pw, val, __ATOMIC_SEQ_CST);
 }
 
 template <class T, class V>
@@ -93,8 +85,8 @@ static _ALWAYS_INLINE_ T atomic_exchange_if_greater(vo
 
 /* Implementation for GCC & Clang */
 
-// GCC guarantees atomic intrinsics for sizes of 1, 2, 4 and 8 bytes.
-// Clang states it supports GCC atomic builtins.
+#include <stdbool.h>
+#include <atomic>
 
 template <class T>
 static _ALWAYS_INLINE_ T atomic_conditional_increment(volatile T *pw) {
@@ -103,7 +95,7 @@ static _ALWAYS_INLINE_ T atomic_conditional_increment(
 		if (tmp == 0) {
 			return 0; // if zero, can't add to it anymore
 		}
-		if (__sync_val_compare_and_swap(pw, tmp, tmp + 1) == tmp) {
+		if (__atomic_compare_exchange_n(pw, &tmp, tmp + 1, false, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST) == true) {
 			return tmp + 1;
 		}
 	}
@@ -136,7 +128,7 @@ static _ALWAYS_INLINE_ T atomic_exchange_if_greater(vo
 		if (tmp >= val) {
 			return tmp; // already greater, or equal
 		}
-		if (__sync_val_compare_and_swap(pw, tmp, val) == tmp) {
+		if (__atomic_compare_exchange_n(pw, &tmp, val, false, __ATOMIC_SEQ_CST, __ATOMIC_SEQ_CST) == true) {
 			return val;
 		}
 	}
