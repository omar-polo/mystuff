$OpenBSD: patch-idlib_math_Simd_AVX2_cpp,v 1.1.1.1 2019/09/02 18:04:40 thfr Exp $

work around problematic AVX functions

Index: idlib/math/Simd_AVX2.cpp
--- idlib/math/Simd_AVX2.cpp.orig
+++ idlib/math/Simd_AVX2.cpp
@@ -39,6 +39,8 @@ idSIMD_AVX2::CullByFrustum
 ============
 */
 void VPCALL idSIMD_AVX2::CullByFrustum( idDrawVert *verts, const int numVerts, const idPlane frustum[6], byte *pointCull, float epsilon ) {
+	return idSIMD_SSE::CullByFrustum( verts, numVerts, frustum, pointCull, epsilon );
+	/*
 	const __m256 fA = _mm256_set_ps( 0, 0, frustum[5][0], frustum[4][0], frustum[3][0], frustum[2][0], frustum[1][0], frustum[0][0] );
 	const __m256 fB = _mm256_set_ps( 0, 0, frustum[5][1], frustum[4][1], frustum[3][1], frustum[2][1], frustum[1][1], frustum[0][1] );
 	const __m256 fC = _mm256_set_ps( 0, 0, frustum[5][2], frustum[4][2], frustum[3][2], frustum[2][2], frustum[1][2], frustum[0][2] );
@@ -58,6 +60,7 @@ void VPCALL idSIMD_AVX2::CullByFrustum( idDrawVert *ve
 		pointCull[j] = (byte)mask_lo & mask6;
 	}
 	_mm256_zeroupper();
+	*/
 }
 
 /*
@@ -66,6 +69,8 @@ idSIMD_AVX2::CullByFrustum2
 ============
 */
 void VPCALL idSIMD_AVX2::CullByFrustum2( idDrawVert *verts, const int numVerts, const idPlane frustum[6], unsigned short *pointCull, float epsilon ) {
+	return idSIMD_SSE::CullByFrustum2( verts, numVerts, frustum, pointCull, epsilon );
+	/*
 	const __m256 fA = _mm256_set_ps( 0, 0, frustum[5][0], frustum[4][0], frustum[3][0], frustum[2][0], frustum[1][0], frustum[0][0] );
 	const __m256 fB = _mm256_set_ps( 0, 0, frustum[5][1], frustum[4][1], frustum[3][1], frustum[2][1], frustum[1][1], frustum[0][1] );
 	const __m256 fC = _mm256_set_ps( 0, 0, frustum[5][2], frustum[4][2], frustum[3][2], frustum[2][2], frustum[1][2], frustum[0][2] );
@@ -87,6 +92,7 @@ void VPCALL idSIMD_AVX2::CullByFrustum2( idDrawVert *v
 		pointCull[j] = (unsigned short)(mask_lo & mask6 | (mask_hi & mask6) << 6);
 	}
 	_mm256_zeroupper();
+	*/
 }
 
 #define SHUF(i0, i1, i2, i3) _MM_SHUFFLE(i3, i2, i1, i0)
@@ -107,6 +113,8 @@ void VPCALL idSIMD_AVX2::CullByFrustum2( idDrawVert *v
 	Res##_z = _mm256_mul_ps(A##_z, S); \
 
 void VPCALL idSIMD_AVX2::DeriveTangents( idPlane *planes, idDrawVert *verts, const int numVerts, const int *indexes, const int numIndexes ) {
+	return idSIMD_SSE::DeriveTangents(planes, verts, numVerts, indexes, numIndexes);
+	/*
 	for (int i = 0; i < numVerts; i++) {
 		float *ptr = &verts[i].normal.x;
 		_mm256_storeu_ps(ptr, _mm256_setzero_ps());
@@ -344,9 +352,12 @@ void VPCALL idSIMD_AVX2::DeriveTangents( idPlane *plan
 		C.tangents[0] += tangU;
 		C.tangents[1] += tangV;
 	}
+	*/
 }
 
 void VPCALL idSIMD_AVX2::NormalizeTangents( idDrawVert *verts, const int numVerts ) {
+	return idSIMD_SSE::NormalizeTangents(verts, numVerts);
+	/*
 	//in all vector normalizations, W component is can be zero (division by zero)
 	//we have to mask any exceptions here
 	idIgnoreFpExceptions guardFpExceptions;
@@ -489,4 +500,5 @@ void VPCALL idSIMD_AVX2::NormalizeTangents( idDrawVert
 			tang.NormalizeFast();
 		}
 	}
+	*/
 }
